{
  "manifestVersion": 1,
  "id": 1001,
  "slug": "snapshot-diff",
  "title": "Snapshot Diff (Structured Change Summary)",
  "category": "etl-diff",
  "difficulty": "intermediate",
  "objective": "Compute added / updated / deleted keys between full and incremental snapshots",
  "narrative": "You receive an authoritative full snapshot (previous system state) and an incremental snapshot containing only keys that changed since the last full. A value of null in the incremental snapshot means the key was deleted. Produce a structured diff summarizing additions, updates (with before/after), and deletions. This mirrors real-world change data capture (CDC) reconciliation.",
  "contract": {
    "functionName": "snapshot_diff",
    "description": "Return structured diff with keys: added, updated, deleted.",
    "inputs": [
      { "name": "full_snapshot", "type": "dict[str, Any]", "description": "Previous complete state mapping keys to values", "example": {"a":1,"b":2} },
      { "name": "incr_snapshot", "type": "dict[str, Any | null]", "description": "Sparse mapping containing only changed keys; null means delete", "example": {"b":3,"c":9,"a":null} }
    ],
    "output": { "name": "diff", "type": "DiffResult", "description": "Structured diff object", "example": {"added":{"c":9},"updated":{"b":[2,3]},"deleted":["a"]} },
    "complexity": "O(n) over union of keys",
    "constraints": ["Do not mutate inputs","Treat missing keys as unchanged","Value null in incremental => deletion","Exclude no-op updates where value unchanged"]
  },
  "ioSchema": "type DiffResult = {\n  added: dict[str, Any]\n  updated: dict[str, tuple[Any, Any]]  # (old, new)\n  deleted: list[str]\n}",
  "examples": [
    {"name":"basic","description":"Add, update, delete","input":{"full_snapshot":{"a":1,"b":2},"incr_snapshot":{"b":3,"c":9,"a":null}},"output":{"added":{"c":9},"updated":{"b":[2,3]},"deleted":["a"]}},
    {"name":"no_changes","description":"Empty incremental => empty diff","input":{"full_snapshot":{"x":10},"incr_snapshot":{}},"output":{"added":{},"updated":{},"deleted":[]}},
    {"name":"addition_only","description":"Only new keys","input":{"full_snapshot":{},"incr_snapshot":{"n":1}},"output":{"added":{"n":1},"updated":{},"deleted":[]}}
  ],
  "properties": [
    {"id":"no_input_mutation","description":"Original input dicts unchanged after call","kind":"builtin"},
    {"id":"reconstruct_new_state","description":"Applying diff on full reproduces new state","kind":"builtin"},
    {"id":"idempotent_on_full_application","description":"Re-applying diff to already-updated state yields empty diff","kind":"builtin"}
  ],
  "hints": [
    {"level":1,"text":"Collect union of keys that appear in either mapping"},
    {"level":2,"text":"Classify each key: if in incr only => added; if value is null => deletion; if in both and changed => updated"},
    {"level":3,"text":"Build result using new dict/list objects (avoid mutating inputs)"},
    {"level":4,"text":"Skip keys where full_snapshot value equals incr_snapshot value"},
    {"level":5,"text":"Return shape exactly with keys added, updated, deleted"}
  ],
  "code": {
    "language": "python",
    "starter": "def snapshot_diff(full_snapshot: dict[str, object], incr_snapshot: dict[str, object | None]) -> dict[str, object]:\n    \"\"\"\n    Snapshot Diff\n\n    Goal: Summarize added / updated / deleted keys between snapshots.\n\n    Return a dict: { 'added': {...}, 'updated': {...}, 'deleted': [...] }\n    Rules: null in incr => delete; do not mutate inputs; skip no-op updates.\n    Complexity: O(n) over union of keys.\n    \"\"\"\n    # TODO: implement\n    raise NotImplementedError()\n",
    "solution": "def snapshot_diff(full_snapshot: dict[str, object], incr_snapshot: dict[str, object | None]) -> dict[str, object]:\n    added: dict[str, object] = {}\n    updated: dict[str, tuple[object, object]] = {}\n    deleted: list[str] = []\n    # Iterate incremental keys for adds/updates/deletes\n    for k, v in incr_snapshot.items():\n        if v is None:\n            if k in full_snapshot:\n                deleted.append(k)\n            continue\n        if k not in full_snapshot:\n            added[k] = v\n        else:\n            old = full_snapshot[k]\n            if old != v:\n                updated[k] = (old, v)\n    return { 'added': added, 'updated': updated, 'deleted': sorted(deleted) }\n"
  },
  "evaluation": {
    "mode": "return",
    "expectedOutput": "{added:{c:9},updated:{b:[2,3]},deleted:[a]}",
    "strict": false
  },
  "tags": ["python","diff","cdc","schema-contract"],
  "dataFixtures": {
    "basic_full": {"a":1,"b":2},
    "basic_incr": {"b":3,"c":9,"a":null}
  },
  "notes": ["Evaluation expectedOutput is illustrative only; actual return object diff will be deep-compared in harness."]
}
